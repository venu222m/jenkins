jenkins Kubernetes CLI (kubectl) configured

Docker installed (if you are building Docker images)

Kubernetes credentials (kubeconfig file, service account, etc.)

Jenkins credentials configured (can use Kubernetes service account or credentials plugin)
| Plugin                              | Purpose                                                     | Required?                                   |
| ----------------------------------- | ----------------------------------------------------------- | ------------------------------------------- |
| ✅ **Pipeline**                      | Enables Jenkins Pipeline (declarative + scripted pipelines) | ✅ Essential                                 |
| ✅ **Docker Pipeline**               | Allows Docker builds inside pipelines                       | ✅ If you’re building Docker images          |
| ✅ **Kubernetes CLI Plugin**         | Allows you to install and manage `kubectl` inside Jenkins   | ✅ If Jenkins agent doesn’t have kubectl     |
| ✅ **Kubernetes Credentials Plugin** | Manage Kubernetes kubeconfig files as credentials           | ✅ Essential for secure kubeconfig injection |
| ✅ **Credentials Plugin**            | Manage credentials securely inside Jenkins                  | ✅ Absolutely essential                      |
| ✅ **Git Plugin**                    | Enables cloning Git repositories                            | ✅ Essential                                 |
| ✅ **GitHub Branch Source Plugin**   | For GitHub integration, webhook triggers                    | ✅ Recommended                               |
| ✅ **Blue Ocean (optional)**         | Modern Jenkins UI for pipelines                             | Optional                                    |
| ✅ **Docker Commons Plugin**         | For Docker credential storage                               | ✅ If pushing to Docker Hub or registries    |

Step-by-step:
Go to Jenkins → Manage Jenkins → Credentials.

Choose the appropriate domain or use "(global)".

Click “Add Credentials”.

Kind: Select "Secret file"

File: Upload your ~/.kube/config

ID: Use an ID like kubeconfig-id (must match what you use in your Jenkinsfile)

Description: (Optional)


you're using AWS EKS, run:
bash
Copy
Edit
aws eks update-kubeconfig --name <your-cluster-name> --region <your-region>



your-repo/
│
├── src/           # your app code
├── Dockerfile
├── Jenkinsfile
└── k8s/
    ├── deployment.yaml
    └── service.yaml

pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "yourdockerhubuser/yourapp:latest"
        KUBECONFIG_CREDENTIALS_ID = 'kubeconfig-eks'        // Jenkins secret file
        AWS_CREDS_ID = 'aws-creds'                          // Jenkins AWS credentials (username + password)
        DOCKERHUB_CREDS_ID = 'dockerhub-credentials'        // Jenkins Docker Hub credentials
    }

    stages {

        stage('Checkout Code') {
            steps {
                git url: 'https://github.com/your/repo.git', branch: 'main'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${DOCKER_IMAGE}")
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                withDockerRegistry([credentialsId: "${DOCKERHUB_CREDS_ID}", url: '']) {
                    script {
                        docker.image("${DOCKER_IMAGE}").push()
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                withCredentials([
                    file(credentialsId: "${KUBECONFIG_CREDENTIALS_ID}", variable: 'KUBECONFIG_FILE'),
                    usernamePassword(credentialsId: "${AWS_CREDS_ID}", usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    sh '''
                    export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
                    export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
                    export AWS_DEFAULT_REGION=us-east-1
                    export KUBECONFIG=$KUBECONFIG_FILE

                    kubectl apply -f k8s/deployment.yaml
                    kubectl apply -f k8s/service.yaml
                    '''
                }
            }
        }
    }

    post {
        success {
            echo '✅ Deployment successful!'
        }
        failure {
            echo '❌ Deployment failed!'
        }
    }
}
